version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: data_platform_postgres
    environment:
      POSTGRES_USER: dataeng
      POSTGRES_PASSWORD: dataeng123
      POSTGRES_DB: data_platform
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dataeng"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Airflow Init (one-time setup)
  airflow-init:
    build: 
      context: ./docker/airflow
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - AIRFLOW_UID=${AIRFLOW_UID}
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW__CORE__LOAD_EXAMPLES}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - ENABLE_PII_MASKING=${ENABLE_PII_MASKING}
      - MASKING_SALT=${MASKING_SALT}
      - PYTHONPATH=/opt/airflow:/opt/airflow/dags:/opt/airflow/include
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: |
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || echo 'User already exists'
      "

  # Airflow Webserver
  airflow-webserver:
    build: 
      context: ./docker/airflow
      dockerfile: Dockerfile
    container_name: data_platform_airflow_webserver
    depends_on:
      - airflow-init
    env_file:
      - .env
    environment:
      - AIRFLOW_UID=${AIRFLOW_UID}
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW__CORE__LOAD_EXAMPLES}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - ENABLE_PII_MASKING=${ENABLE_PII_MASKING}
      - MASKING_SALT=${MASKING_SALT}
      - PYTHONPATH=/opt/airflow:/opt/airflow/dags:/opt/airflow/include
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/include:/opt/airflow/include
      - ./dbt:/opt/airflow/dbt
    command: webserver
    restart: unless-stopped

  # Airflow Scheduler
  airflow-scheduler:
    build: 
      context: ./docker/airflow
      dockerfile: Dockerfile
    container_name: data_platform_airflow_scheduler
    depends_on:
      - airflow-init
    env_file:
      - .env
    environment:
      - AIRFLOW_UID=${AIRFLOW_UID}
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW__CORE__LOAD_EXAMPLES}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - ENABLE_PII_MASKING=${ENABLE_PII_MASKING}
      - MASKING_SALT=${MASKING_SALT}
      - PYTHONPATH=/opt/airflow:/opt/airflow/dags:/opt/airflow/include
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/include:/opt/airflow/include
      - ./dbt:/opt/airflow/dbt
    command: scheduler
    restart: unless-stopped

  metabase:
    image: metabase/metabase:v0.48.0
    container_name: metabase
    ports:
      - "3001:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: dataeng
      MB_DB_PASS: dataeng123
      MB_DB_HOST: postgres
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  airflow:
    driver: bridge
